@page "/database-manager"
@rendermode InteractiveServer
@using AsyncSqlTool.Models
@using AsyncSqlTool.Services
@using Microsoft.Extensions.Logging
@using DevExpress.Blazor
@inject QueryService QueryService
@inject ILogger<DatabaseManagerPage> Logger

<style>
    .db-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 12px;
        overflow: hidden;
        height: 100%;
        background-color: #fff;
        border: 1px solid rgba(0,0,0,0.08);
    }
    
    .db-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .db-card-header {
        padding: 20px;
        border-bottom: 1px solid rgba(0,0,0,0.08);
        background-color: #f8f9fa;
    }
    
    .db-card-body {
        padding: 20px;
    }
    
    .db-card-footer {
        padding: 15px 20px;
        background-color: #f8f9fa;
        border-top: 1px solid rgba(0,0,0,0.08);
    }
    
    .db-badge {
        font-size: 0.7rem;
        padding: 0.3rem 0.6rem;
        border-radius: 50px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .db-badge-hana {
        background-color: #e3f2fd;
        color: #1565c0;
    }
    
    .db-badge-mssql {
        background-color: #e8f5e9;
        color: #2e7d32;
    }
    
    .db-badge-mysql {
        background-color: #fff8e1;
        color: #ff8f00;
    }
    
    .db-badge-postgresql {
        background-color: #ede7f6;
        color: #5e35b1;
    }
    
    .db-badge-oracle {
        background-color: #ffebee;
        color: #c62828;
    }
    
    .db-heading {
        position: relative;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
    }
    
    .db-heading:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 80px;
        height: 4px;
        background: linear-gradient(90deg, #3498db, #6fa9e0);
        border-radius: 2px;
    }
    
    .db-button {
        transition: all 0.2s ease;
        border-radius: 6px;
    }
    
    .db-button:hover {
        transform: translateY(-2px);
    }
    
    .db-header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    
    .db-info-label {
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        color: #6c757d;
        margin-bottom: 0.3rem;
    }
    
    .connection-string-mask {
        background-color: #f8f9fa;
        padding: 8px 12px;
        border-radius: 6px;
        font-family: monospace;
        font-size: 0.85rem;
        color: #6c757d;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .db-empty-state {
        text-align: center;
        padding: 60px 30px;
        background-color: #f8f9fa;
        border-radius: 12px;
        border: 1px dashed #dee2e6;
    }
    
    .db-empty-state i {
        font-size: 3rem;
        color: #adb5bd;
        margin-bottom: 1rem;
    }
</style>

<div class="container py-4">
    <div class="db-header-container">
        <h2 class="db-heading">Veritabanı Bağlantıları</h2>
        <DxButton Text="Yeni Bağlantı Ekle"
                  IconCssClass="fa fa-plus"
                  RenderStyle="ButtonRenderStyle.Primary"
                  CssClass="db-button"
                  Click="@(() => OpenConnectionForm(null))" />
    </div>

    @if (DatabaseConnections == null)
    {
        <div class="text-center my-4">
        </div>
    }
    else if (!DatabaseConnections.Any())
    {
        <div class="db-empty-state">
            <i class="fa fa-database mb-3"></i>
            <h4>Henüz Veritabanı Bağlantısı Bulunmuyor</h4>
            <p class="text-muted mb-4">Veritabanı bağlantılarınızı buradan yönetebilirsiniz.</p>
            <DxButton Text="İlk Bağlantıyı Ekle"
                      IconCssClass="fa fa-plus-circle"
                      RenderStyle="ButtonRenderStyle.Primary"
                      Click="@(() => OpenConnectionForm(null))" />
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var connection in DatabaseConnections)
            {
                <div class="col-lg-4 col-md-6">
                    <div class="db-card">
                        <div class="db-card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">@connection.Name</h5>
                                <span class="db-badge @GetDatabaseTypeBadgeClass(connection.DatabaseType)">
                                    @connection.DatabaseType
                                </span>
                            </div>
                            @if (!connection.IsActive)
                            {
                                <span class="badge bg-secondary mt-2">Pasif</span>
                            }
                        </div>
                        <div class="db-card-body">
                            <div class="mb-3">
                                <p class="db-info-label">Bağlantı Bilgisi</p>
                                <div class="connection-string-mask">
                                    @MaskConnectionString(connection.ConnectionString)
                                </div>
                            </div>
                            
                            <div>
                                <p class="db-info-label">Açıklama</p>
                                <p class="mb-0">@(string.IsNullOrEmpty(connection.Description) ? "-" : connection.Description)</p>
                            </div>
                        </div>
                        <div class="db-card-footer">
                            <div class="d-flex justify-content-between">
                                <DxButton Text="Test Et"
                                          RenderStyle="ButtonRenderStyle.Light"
                                          IconCssClass="fa fa-check-circle"
                                          CssClass="db-button"
                                          Click="@(() => TestConnection(connection))" />

                                <div>
                                    <DxButton Text=""
                                              RenderStyle="ButtonRenderStyle.Secondary"
                                              IconCssClass="fa fa-edit"
                                              CssClass="db-button me-2"
                                              ToolTip="Düzenle"
                                              Click="@(() => OpenConnectionForm(connection))" />

                                    <DxButton Text=""
                                              RenderStyle="ButtonRenderStyle.Danger"
                                              IconCssClass="fa fa-trash"
                                              CssClass="db-button"
                                              ToolTip="Sil"
                                              Click="@(() => ConfirmDeleteConnection(connection))" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Veritabanı Bağlantı Formu -->
<DxPopup HeaderText="Veritabanı Bağlantısı"
         @bind-Visible="IsConnectionFormVisible"
         ShowFooter="true"
         Width="700px"
         CloseOnEscapeKey="false"
         CloseOnOutsideClick="false">
    <HeaderTemplate>
        <div class="d-flex align-items-center">
            <i class="fa fa-database me-2 text-primary"></i>
            <span class="fs-5">@(EditingConnection.Id > 0 ? "Bağlantı Düzenle" : "Yeni Bağlantı Ekle")</span>
        </div>
    </HeaderTemplate>
    <BodyTemplate Context="popupContext">
        <div class="p-3">
            <div class="mb-4">
                <DxTextBox @bind-Text="@EditingConnection.Name"
                           Label="Bağlantı Adı"
                           CssClass="w-100"
                           NullText="Bağlantı adı girin..."
                           LabelCssClass="db-info-label mb-2"
                           LabelPosition="LabelPosition.Top" />
            </div>

            <div class="mb-4">
                <DxComboBox Data="@DatabaseTypes"
                            @bind-Value="@EditingConnection.DatabaseType"
                            Label="Veritabanı Türü"
                            CssClass="w-100"
                            LabelCssClass="db-info-label mb-2"
                            LabelPosition="LabelPosition.Top" />
                <div class="mt-1">
                    <span class="badge @GetDatabaseTypeBadgeClass(EditingConnection.DatabaseType)">
                        @(string.IsNullOrEmpty(EditingConnection.DatabaseType) ? "Seçiniz" : EditingConnection.DatabaseType)
                    </span>
                </div>
            </div>

            <div class="mb-4">
                <DxMemo @bind-Text="@EditingConnection.ConnectionString"
                        Label="Bağlantı Dizesi"
                        CssClass="w-100"
                        Rows="3"
                        NullText="Veritabanı bağlantı dizesini girin..."
                        LabelCssClass="db-info-label mb-2"
                        LabelPosition="LabelPosition.Top" />
                <div class="form-text mt-1">
                    <i class="fa fa-info-circle me-1"></i>
                    Bağlantı dizesi formatı seçilen veritabanı türüne göre değişiklik gösterir.
                </div>
            </div>

            <div class="mb-4">
                <DxMemo @bind-Text="@EditingConnection.Description"
                        Label="Açıklama"
                        CssClass="w-100"
                        Rows="2"
                        NullText="Açıklama girin (opsiyonel)..."
                        LabelCssClass="db-info-label mb-2"
                        LabelPosition="LabelPosition.Top" />
            </div>

            <div class="form-check form-switch">
                <DxCheckBox @bind-Checked="@EditingConnection.IsActive"
                            Label="Bağlantı Aktif"
                            LabelPosition="LabelPosition.Right" />
                <div class="form-text mt-1">
                    <i class="fa fa-lightbulb-o me-1"></i>
                    Pasif durumdaki bağlantılar, sorgularda ve otomatik çalıştırma işlemlerinde kullanılmaz.
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-between p-3 border-top">
            <DxButton Text="Test Bağlantısı"
                      RenderStyle="ButtonRenderStyle.Light"
                      IconCssClass="fa fa-check-circle"
                      Click="@(() => TestConnection(EditingConnection))"
                      Enabled="@(!string.IsNullOrEmpty(EditingConnection.ConnectionString))" />

            <div>
                <DxButton Text="İptal"
                          RenderStyle="ButtonRenderStyle.Secondary"
                          Click="@CloseConnectionForm"
                          CssClass="me-2" />
                <DxButton Text="@(EditingConnection.Id > 0 ? "Güncelle" : "Ekle")"
                          RenderStyle="ButtonRenderStyle.Primary"
                          Click="@SaveConnection" />
            </div>
        </div>
    </FooterTemplate>
</DxPopup>

<!-- Silme Onay Popupı -->
<DxPopup HeaderText="Silme Onayı"
         @bind-Visible="@IsDeleteConfirmVisible"
         ShowFooter="true"
         Width="450px">
    <HeaderTemplate>
        <div class="d-flex align-items-center">
            <i class="fa fa-exclamation-triangle me-2 text-danger"></i>
            <span class="fs-5">Bağlantı Silme Onayı</span>
        </div>
    </HeaderTemplate>
    <BodyTemplate Context="popupContext">
        <div class="p-3">
            <div class="alert alert-danger p-3 mb-3">
                <p class="mb-0">@DeleteConfirmMessage</p>
            </div>

            <div class="alert alert-warning p-3">
                <h6><i class="fa fa-warning me-2"></i>Uyarı</h6>
                <p class="mb-0">Bu bağlantıya ait kaydedilmiş sorgular da silinecektir. Bu işlem geri alınamaz.</p>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end p-3 border-top">
            <DxButton Text="İptal"
                      RenderStyle="ButtonRenderStyle.Light"
                      Click="@(() => IsDeleteConfirmVisible = false)"
                      CssClass="me-2" />
            <DxButton Text="Sil"
                      RenderStyle="ButtonRenderStyle.Danger"
                      IconCssClass="fa fa-trash"
                      Click="@ConfirmDelete" />
        </div>
    </FooterTemplate>
</DxPopup>
<div>
    <DxToastProvider Name="DatabaseManagerToasts"
                     MaxToastCount="5"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Center"
                     VerticalAlignment="VerticalEdge.Top"
                     DisplayTime="TimeSpan.FromSeconds(4)"
                     Width="350px" />
</div>
@code {
    [Inject] IToastNotificationService ToastService { get; set; }
    // Veritabanı bağlantıları
    private bool IsConnectionFormVisible { get; set; } = false;
    private List<DatabaseConnection> DatabaseConnections { get; set; } = new List<DatabaseConnection>();
    private DatabaseConnection EditingConnection { get; set; } = new DatabaseConnection();

    // Silme onayı
    private bool IsDeleteConfirmVisible { get; set; } = false;
    private string DeleteConfirmMessage { get; set; } = string.Empty;
    private Func<Task> DeleteConfirmAction { get; set; }

    // Toast mesajları
    private bool IsToastVisible { get; set; } = false;
    private string ToastMessage { get; set; } = string.Empty;
    private string ToastTitle { get; set; } = "Bilgi";

    // Veritabanı türleri - basitleştirilmiş liste
    private List<string> DatabaseTypes { get; set; } = new List<string>
    {
        "HANA",
        "MSSQL", 
        "MYSQL",
        "POSTGRESQL",
        "ORACLE"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDatabaseConnections();
    }

    private async Task LoadDatabaseConnections()
    {
        try
        {
            DatabaseConnections = await QueryService.GetAllDatabaseConnectionsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Veritabanı bağlantıları yüklenirken hata oluştu");
            ShowToast("Hata", $"Veritabanı bağlantıları yüklenirken hata oluştu: {ex.Message}" );
        }
    }

    #region Bağlantı Yönetimi

    private void OpenConnectionForm(DatabaseConnection connection)
    {
        if (connection == null)
        {
            // Yeni bağlantı için
            EditingConnection = new DatabaseConnection { IsActive = true };
        }
        else
        {
            // Mevcut bağlantıyı düzenleme için
            // Önce veritabanı türünü daha sonra manuel olarak ayarlamak için saklayalım
            string dbType = connection.DatabaseType;
            
            // Nesneyi klonla, doğrudan referans verme
            EditingConnection = new DatabaseConnection
            {
                Id = connection.Id,
                Name = connection.Name,
                ConnectionString = connection.ConnectionString,
                Description = connection.Description,
                IsActive = connection.IsActive,
                CreatedAt = connection.CreatedAt,
                UpdatedAt = connection.UpdatedAt
            };
            
            // Veritabanı tipini manuel olarak ayarlayalım
            EditingConnection.DatabaseType = dbType;
        }

        IsConnectionFormVisible = true;
    }

    private void CloseConnectionForm()
    {
        IsConnectionFormVisible = false;
    }

    private async Task SaveConnection()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(EditingConnection.Name))
            {
                ShowToast("Hata", "Bağlantı adı boş olamaz" );
                return;
            }

            if (string.IsNullOrWhiteSpace(EditingConnection.DatabaseType))
            {
                ShowToast("Hata", "Veritabanı türü seçilmelidir" );
                return;
            }

            if (string.IsNullOrWhiteSpace(EditingConnection.ConnectionString))
            {
                ShowToast("Hata", "Bağlantı dizesi boş olamaz" );
                return;
            }

            bool isNew = EditingConnection.Id == 0;

            // Kaydetmeden önce DatabaseType'ın kesinlikle ayarlandığından emin olalım
            Logger.LogInformation($"Bağlantı kaydediliyor: ID={EditingConnection.Id}, Name={EditingConnection.Name}, Type={EditingConnection.DatabaseType}");

            try {
                if (isNew)
                {
                    await QueryService.AddDatabaseConnectionAsync(EditingConnection);
                    ShowToast("Başarılı", "Veritabanı bağlantısı başarıyla eklendi");
                }
                else
                {
                    // DatabaseType değerinin doğru şekilde aktarıldığından emin olalım
                    var result = await QueryService.UpdateDatabaseConnectionAsync(EditingConnection);
                    if (result)
                    {
                        ShowToast("Başarılı", "Veritabanı bağlantısı başarıyla güncellendi");
                    }
                    else
                    {
                        ShowToast("Hata", "Veritabanı bağlantısı güncellenemedi");
                        return;
                    }
                }
            }
            catch (Exception innerEx)
            {
                Logger.LogError(innerEx, "Kayıt işlemi sırasında hata: " + innerEx.Message);
                ShowToast("Hata", $"Kayıt işlemi sırasında hata: {innerEx.Message}");
                return;
            }

            CloseConnectionForm();
            await LoadDatabaseConnections();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Veritabanı bağlantısı kaydedilirken hata oluştu");
            ShowToast("Hata", $"Veritabanı bağlantısı kaydedilirken hata oluştu: {ex.Message}" );
        }
    }

    private async Task TestConnection(DatabaseConnection connection)
    {
        try
        {
            var result = await QueryService.TestDatabaseConnectionAsync(connection);
            
            if (result.success)
            {
                ShowToast   ("Başarılı", result.message);
            }
            else
            {
                ShowToast("Bağlantı Hatası", result.message );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Bağlantı testi sırasında hata oluştu");
            ShowToast("Hata", $"Bağlantı testi sırasında hata oluştu: {ex.Message}" );
        }
    }

    private void ConfirmDeleteConnection(DatabaseConnection connection)
    {
        DeleteConfirmMessage = $"{connection.Name} veritabanı bağlantısını silmek istediğinize emin misiniz?";
        DeleteConfirmAction = async () => await DeleteConnection(connection.Id);
        IsDeleteConfirmVisible = true;
    }

    private async Task DeleteConnection(int id)
    {
        try
        {
            await QueryService.DeleteDatabaseConnectionAsync(id);
            await LoadDatabaseConnections();
            ShowToast("Başarılı", "Veritabanı bağlantısı başarıyla silindi");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Veritabanı bağlantısı silinirken hata oluştu");
            ShowToast("Hata", $"Veritabanı bağlantısı silinirken hata oluştu: {ex.Message}" );
        }
        finally
        {
            IsDeleteConfirmVisible = false;
        }
    }

    #endregion

    #region Yardımcı Metodlar
    private string GetDatabaseTypeBadgeClass(string dbType)
    {
        if (string.IsNullOrEmpty(dbType))
            return "badge-secondary"; // Default style for empty/null values

        return dbType.ToUpper() switch
        {
            "HANA" => "db-badge-hana",
            "MSSQL" => "db-badge-mssql",
            "MYSQL" => "db-badge-mysql",
            "POSTGRESQL" => "db-badge-postgresql",
            "ORACLE" => "db-badge-oracle",
            _ => "badge-secondary"
        };
    }
    private string MaskConnectionString(string connectionString)
    {
        if (string.IsNullOrEmpty(connectionString))
            return string.Empty;

        // Bağlantı dizesindeki password bölümünü maskele
        var maskedString = System.Text.RegularExpressions.Regex.Replace(
            connectionString,
            @"(Password|PWD|PASSWORD)=([^;]*)",
            match => $"{match.Groups[1].Value}=********"
        );

        return maskedString;
    }

    private void ShowToast(string title, string message)
    {
        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "DatabaseManagerToasts",
                ThemeMode = ToastThemeMode.Light,
                RenderStyle = title.Contains("Hata") || title.Contains("Hatası") ?
                            ToastRenderStyle.Danger :
                            (title.Contains("Başarılı") ? ToastRenderStyle.Success : ToastRenderStyle.Info),
                Title = title,
                Text = message
            });
    }
    private async Task ConfirmDelete()
    {
        if (DeleteConfirmAction != null)
        {
            await DeleteConfirmAction.Invoke();
        }
        IsDeleteConfirmVisible = false;
    }

    #endregion
}