@page "/query"
@rendermode InteractiveServer
@using AsyncSqlTool.Models
@using AsyncSqlTool.Services
@using Microsoft.Extensions.Logging
@using DevExpress.Blazor
@using DevExpress.Blazor.Grid
@inject QueryService QueryService
@inject ILogger<QueryPage> Logger

<style>
    .main-container {
        max-width: 1400px;
        margin: 0 auto;
    }

    .card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        background-color: #fff;
        border: none;
    }

    .card-header {
        background-color: #f8fafc;
        border-bottom: 1px solid #edf2f7;
        padding: 15px 20px;
        font-weight: 600;
        border-radius: 8px 8px 0 0;
    }

    .card-body {
        padding: 20px;
    }

    .toolbar {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .toolbar-section {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .action-buttons {
        margin-top: 15px;
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .section-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #2d3748;
        border-bottom: 1px solid #edf2f7;
        padding-bottom: 8px;
    }

    .query-editor {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 14px;
        border-radius: 6px;
        margin-top: 10px;
    }

    .badge {
        font-size: 0.8rem;
        padding: 5px 10px;
        border-radius: 50px;
        background-color: #e2e8f0;
        color: #4a5568;
        margin-left: 8px;
    }

    .badge-success {
        background-color: #c6f6d5;
        color: #276749;
    }

    .badge-primary {
        background-color: #bee3f8;
        color: #2b6cb0;
    }

    /* DevExpress özelleştirmeleri */
    :deep(.dxbs-grid) {
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #edf2f7;
    }

    :deep(.dxbs-grid-header) {
        background-color: #f8fafc;
        border-bottom: 1px solid #edf2f7;
    }

    :deep(.dxgv) {
        border-bottom: 1px solid #f0f0f0;
    }

    :deep(.dxbs-button) {
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 500;
        transition: all 0.2s;
    }

        :deep(.dxbs-button):hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

    :deep(.dxbs-textbox), :deep(.dxbs-combobox), :deep(.dxbs-memo) {
        border-radius: 6px;
    }

        :deep(.dxbs-textbox) input, :deep(.dxbs-combobox) input {
            padding: 8px 12px;
            height: 40px;
        }

    :deep(.dxbs-loadpanel) {
        backdrop-filter: blur(4px);
    }

    .table-operations {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        align-items: center;
    }

    .alert {
        padding: 12px 16px;
        margin-bottom: 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .column-mapping-table {
        width: 100%;
        border-collapse: collapse;
    }

        .column-mapping-table th {
            background-color: #f8fafc;
            padding: 10px;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid #edf2f7;
        }

        .column-mapping-table td {
            padding: 8px 10px;
            border-bottom: 1px solid #edf2f7;
        }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 4px 10px;
        border-radius: 50px;
        font-size: 0.8rem;
        margin-left: 10px;
    }

        .status-badge.info {
            background-color: #e6f7ff;
            color: #096dd9;
        }

        .status-badge.success {
            background-color: #d9f7be;
            color: #389e0d;
        }

    .tab-container {
        margin-top: 20px;
    }

    .tab-headers {
        display: flex;
        border-bottom: 1px solid #edf2f7;
        margin-bottom: 15px;
    }

    .tab-header {
        padding: 10px 20px;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        font-weight: 500;
        transition: all 0.2s;
    }

        .tab-header.active {
            border-bottom: 2px solid #3182ce;
            color: #3182ce;
        }

    .tab-content {
        padding: 5px 0;
    }

    :deep(.dxbs-popup) {
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

    :deep(.dxbs-popup-footer) {
        border-top: 1px solid #edf2f7;
        padding: 15px 20px;
        position: sticky;
        bottom: 0;
        background-color: #fff;
        z-index: 10;
        border-radius: 0 0 8px 8px;
    }

    .popup-footer {
        position: sticky;
        bottom: 0;
        background-color: white;
        z-index: 5;
        padding: 15px !important;
        border-top: 1px solid #edf2f7;
        margin-top: 10px;
    }

    /* Grid yükseklik kontrolü */
    .query-select-grid {
        display: flex;
        flex-direction: column;
    }

    :deep(.dxbs-grid) {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    :deep(.dxbs-grid-table-container) {
        flex: 1;
        overflow: auto;
    }
</style>

<div class="py-4">
    <div class="card">
        <div class="card-header">
            <div class="toolbar">
                <div class="toolbar-section me-4">
                    <label for="dbConnection" class="demo-text cw-480 mb-1">
                        Bağlantı Adı :
                    </label>
                    <DxComboBox Data="@DatabaseConnections"
                                Value="@SelectedDatabaseId"
                                ValueChanged="@((int value) => DatabaseSelectionChanged(value))"
                                TextFieldName="Name"
                                ValueFieldName="Id"
                                CssClass="me-2"
                                Width="250px"
                                InputId="dbConnection"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.Contains"
                                NullText="Veritabanı bağlantısı seçin..." />
                </div>

                <div class="toolbar-section flex-grow-1">
                    <DxButton Text="Kayıtlı Sorgular"
                              IconCssClass="fa fa-folder-open"
                              RenderStyle="ButtonRenderStyle.Primary"
                              Click="@ShowSavedQueriesPopup"
                              Enabled="@(!IsProcessing)" />

                    <DxButton Text="Sorguyu Kaydet"
                              IconCssClass="fa fa-save"
                              RenderStyle="ButtonRenderStyle.Success"
                              Click="@ShowSaveQueryPopup"
                              Enabled="@(!IsProcessing && !string.IsNullOrEmpty(QueryText))" />

                    <DxButton Text="Kolon Eşleştirme"
                              IconCssClass="fa fa-columns"
                              RenderStyle="ButtonRenderStyle.Warning"
                              Click="@ShowColumnMappingPopup"
                              Enabled="@(!IsProcessing && !string.IsNullOrEmpty(QueryText))" />
                </div>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <div class="mb-3">
                        <DxMemo @bind-Text="@PreQuery"
                                Label="Ön Sorgu (SQL Server)"
                                CssClass="w-100"
                                Rows="3"
                                NullText="SQL Server'da ana sorgudan önce çalıştırılacak sorgu (opsiyonel)..." />
                    </div>

                    <DxMemo @bind-Text="@QueryText"
                            CssClass="w-100 query-editor"
                            SizeMode="SizeMode.Large"
                            ResizeMode="MemoResizeMode.VerticalAndHorizontal"
                            Rows="15"
                            NullText="Kaynak Sorgu"
                            Placeholder="SELECT * FROM ..." />

                    <div class="mb-3 mt-3">
                        <DxMemo @bind-Text="@PostQuery"
                                Label="Son Sorgu (SQL Server)"
                                CssClass="w-100"
                                Rows="3"
                                NullText="SQL Server'da ana sorgudan sonra çalıştırılacak sorgu (opsiyonel)..." />
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="section-title">Hedef Tablo Ayarları</div>

                    <div class="mb-3">
                        <label for="targetTable" class="demo-text cw-320 mb-1">
                            Hedef Tablo Adı
                        </label>
                        <DxTextBox @bind-Text="@TargetTableName"
                                   NullText="SQL Server tablo adı"
                                   InputId="targetTable"
                                   CssClass="w-100" />
                    </div>
                    @if (!string.IsNullOrEmpty(TargetTableName))
                    {
                        <div class="table-operations mb-2">
                            <DxButton Text="Görüntüle (Select *)"
                                      IconCssClass="fa fa-table"
                                      RenderStyle="ButtonRenderStyle.Primary"
                                      CssClass="btn-sm"
                                      Click="@ViewTable"
                                      Enabled="@(!IsProcessing)" />

                            <DxButton Text="Temizle (Truncate)"
                                      IconCssClass="fa fa-eraser"
                                      RenderStyle="ButtonRenderStyle.Warning"
                                      CssClass="btn-sm"
                                      Click="@(() => ConfirmTableOperation("truncate"))"
                                      Enabled="@(!IsProcessing)" />

                            <DxButton Text="Sil (Drop)"
                                      IconCssClass="fa fa-trash"
                                      RenderStyle="ButtonRenderStyle.Danger"
                                      CssClass="btn-sm"
                                      Click="@(() => ConfirmTableOperation("drop"))"
                                      Enabled="@(!IsProcessing)" />
                        </div>
                    }


                    <div class="section-title mt-4">Sorgu İşlemleri</div>
                    <div class="row">

                        <div class="col-md-12">

                            @if (!string.IsNullOrEmpty(CurrentQueryName))

                            {
                                <div class="d-flex align-items-center justify-content-between">


                                        <span class="status-badge info">

                                            <h5 class="mb-0">Seçili Sorgu: <i class="fa fa-file-code-o me-2"></i> @CurrentQueryName</h5>

                                        </span>
                                    
                                </div>
                            }
                        </div>

                    </div>
                    
                    <!-- Moved action buttons here -->
                    <div class="action-buttons mt-4">
                        <DxButton Text="Sorguyu Önizle"
                                  IconCssClass="fa fa-eye"
                                  RenderStyle="ButtonRenderStyle.Info"
                                  Click="@PreviewQuery"
                                  Enabled="@(!IsProcessing && !string.IsNullOrEmpty(QueryText))" />

                        <DxButton Text="Sonucu Tabloya Aktar"
                                  IconCssClass="fa fa-play"
                                  RenderStyle="ButtonRenderStyle.Success"
                                  Click="@ExecuteQuery"
                                  Enabled="@(!IsProcessing && !string.IsNullOrEmpty(QueryText) && !string.IsNullOrEmpty(TargetTableName))" />
                        <DxButton Text="Seçili sorguyu Sil"
                                  IconCssClass="fa fa-trash"
                                  RenderStyle="ButtonRenderStyle.Danger"
                                  CssClass="btn-sm"
                                  Click="@(() => ConfirmDeleteCurrentQuery())"
                                  Enabled="@(!IsProcessing)" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (IsProcessing)
    {
        <DxLoadPanel Visible="true"
                     ShowIndicator="true"
                     IndicatorText="İşlem devam ediyor..."
                     ShowContent="false" />
    }

    @if (!string.IsNullOrEmpty(ResultMessage))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger")" role="alert">
            <div>
                <i class="fa @(IsSuccess ? "fa-check-circle" : "fa-exclamation-circle") me-2"></i>
                @ResultMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="@(() => ResultMessage = null)"></button>
        </div>
    }
    <!-- Sorgu Sonuç Tabı -->
    @if (GridData != null && GridData.Count > 0)
    {
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        Sorgu Sonucu
                        <span class="badge badge-success">@GridData.Count kayıt</span>
                    </h5>

                    <div>
                        <DxButton Text="Excel'e Aktar"
                                  IconCssClass="fa fa-file-excel-o"
                                  RenderStyle="ButtonRenderStyle.Success"
                                  Click="@ExportToExcel"
                                  Enabled="@(PreviewGrid != null && GridData.Count > 0)" />
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <DxGrid Data="@GridData"
                        PageSize="10"
                        PagerPosition="GridPagerPosition.Bottom"
                        PagerVisibleNumericButtonCount="5"
                        ShowFilterRow="true"
                        SearchBoxNullText="Aramak için yazın..."
                        @ref="PreviewGrid"
                        CssClass="table-hover grid-striped"
                        ShowGroupPanel="true"
                        TextWrapEnabled="true"
                        AutoExpandAllGroupRows="true"
                        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                        ShowSearchBox="true"
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        AllowSelectRowByClick="true"
                        HighlightRowOnHover="true">
                    <Columns>
                        @if (GridData.Count > 0)
                        {
                            @foreach (var key in ((IDictionary<string, object>)GridData[0]).Keys)
                            {
                                <DxGridDataColumn FieldName="@key" Caption="@key" Width="150" />
                            }
                        }
                    </Columns>
                </DxGrid>
            </div>
        </div>
    }
</div>

<!-- Kayıtlı Sorguların Görüntülendiği Popup -->
<DxPopup HeaderText="Kayıtlı Sorgular"
         @bind-Visible="@IsSavedQueriesPopupVisible"
         ShowFooter="true"
         Width="960px"
         MaxHeight="80vh"
         CloseOnOutsideClick="true"
         CloseOnEscape="true">
    <HeaderTemplate>
        <h4 class="p-2">Kayıtlı Sorgular</h4>
    </HeaderTemplate>
    <BodyTemplate>
        <div class="query-select-grid" style="height: calc(70vh - 120px); overflow: auto;">
            <DxGrid Data="@SavedQueries"
                    @ref="SavedQueriesGrid"
                    ShowFilterRow="true"
                    KeyFieldName="Id"
                    PageSize="10"
                    SelectionMode="GridSelectionMode.Single"
                    @bind-SelectedDataItem="@SelectedSavedQueryObj"
                    FocusedRowChanged="@Grid_FocusedRowChanged">
                <Columns>
                    <DxGridSelectionColumn Width="50px" />
                    <DxGridDataColumn FieldName="Name" Caption="Sorgu Adı" Width="300px" />
                    <DxGridDataColumn FieldName="DatabaseConnection.Name" Caption="Veritabanı" Width="200px" />
                    <DxGridDataColumn FieldName="TargetTableName" Caption="Hedef Tablo" Width="250px" />
                    <DxGridDataColumn FieldName="IsScheduled" Caption="Zamanlanmış Mı" Width="150px">
                        <CellDisplayTemplate Context="cellContext">
                            @{
                                var query = (cellContext.DataItem as SavedQuery);
                                if (query?.IsScheduled == true)
                                {
                                    <div class="text-center">
                                        <i class="fa fa-check text-success"></i>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center">
                                        <i class="fa fa-times text-danger"></i>
                                    </div>
                                }
                            }
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
            </DxGrid>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end p-2 popup-footer">
            <DxButton Text="Seçilen Sorguyu Yükle"
                      CssClass="me-2"
                      RenderStyle="ButtonRenderStyle.Primary"
                      Click="@LoadSelectedQuery"
                      Enabled="@(SelectedSavedQueryObj != null)" />
            <DxButton Text="Seçilen Sorguyu Sil"
                      RenderStyle="ButtonRenderStyle.Danger"
                      Click="@DeleteItem_Click"
                      Enabled="@(SelectedSavedQueryObj != null)" />
        </div>
    </FooterTemplate>
</DxPopup>

<!-- Silme Onay Popupı Ekleyin -->
<DxPopup HeaderText="Sorgu Silme Onayı"
         @bind-Visible="@IsDeleteConfirmationVisible"
         ShowFooter="true"
         Width="400px"
         Position="PopupPosition.Center"
         CloseOnEscapeKey="true">
    <HeaderTemplate>
        <h5 class="p-2">Sorgu Silme Onayı</h5>
    </HeaderTemplate>
    <BodyTemplate>
        <p class="mb-0 p-2">
            <strong>@(QueryToDelete?.Name)</strong> sorgusunu silmek istediğinizden emin misiniz?
            <br />
            Bu işlem geri alınamaz.
        </p>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end p-2 popup-footer">
            <DxButton Text="İptal"
                      RenderStyle="ButtonRenderStyle.Light"
                      Click="@(() => IsDeleteConfirmationVisible = false)"
                      CssClass="me-2" />
            <DxButton Text="Sil"
                      RenderStyle="ButtonRenderStyle.Danger"
                      Click="@DeleteSelectedQuery" />
        </div>
    </FooterTemplate>
</DxPopup>
<!-- Sorgu Kaydetme Popupı -->
<DxPopup HeaderText="Sorguyu Kaydet"
         @bind-Visible="@IsSaveQueryPopupVisible"
         ShowFooter="true"
         Width="700px"
         CloseOnEscapeKey="false"
         CloseOnOutsideClick="false">
    <HeaderTemplate>
        <span class="fs-5">Sorguyu Kaydet</span>
    </HeaderTemplate>
    <BodyTemplate>
        <div class="form-container mx-auto">
            <div class="mb-3">
                <DxTextBox @bind-Text="@SaveQueryName"
                           Label="Sorgu Adı"
                           CssClass="w-100"
                           NullText="Sorgu adı girin..." />
            </div>

            <div class="mb-3">
                <DxTextBox @bind-Text="@SaveTableName"
                           Label="Hedef Tablo Adı"
                           CssClass="w-100"
                           NullText="SQL Server tablo adı..." />
            </div>

            <div class="mb-3">
                <DxTextBox @bind-Text="@SaveKeyColumn"
                           CssClass="w-100"
                           NullText="Örn: CardCode, ItemCode..." />
            </div>

            <div class="mb-3">
                <DxMemo @bind-Text="@SaveQueryDescription"
                        Label="Açıklama"
                        CssClass="w-100"
                        Rows="2"
                        NullText="Açıklama girin (opsiyonel)..." />
            </div>

            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="includeMappings" @bind="IncludeColumnMappings" />
                <label class="form-check-label" for="includeMappings">Kolon eşleştirmelerini de kaydet</label>
            </div>

            @if (IncludeColumnMappings && ColumnMappings.Count > 0)
            {
                <div class="mb-3">
                    <h6>Kolon Eşleştirmeleri</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Kaynak Kolon</th>
                                    <th>Hedef Kolon</th>
                                    <th>Veri Tipi</th>
                                    <th>Anahtar</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var mapping in ColumnMappings)
                                {
                                    <tr>
                                        <td>@mapping.SourceColumnName</td>
                                        <td>@mapping.TargetColumnName</td>
                                        <td>@mapping.DataType</td>
                                        <td>
                                            <input type="checkbox" disabled
                                                   checked="@(SaveKeyColumn == mapping.SourceColumnName)" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end">
            <DxButton Text="İptal"
                      RenderStyle="ButtonRenderStyle.Secondary"
                      Click="@CloseSaveQueryPopup"
                      CssClass="me-2" />
            <DxButton Text="Kaydet"
                      RenderStyle="ButtonRenderStyle.Primary"
                      Click="@SaveQuery" />
        </div>
    </FooterTemplate>
</DxPopup>

<!-- Kolon Eşleştirme Popupı -->
<DxPopup HeaderText="Kolon Eşleştirmelerini Yönet"
         @bind-Visible="@IsColumnMappingPopupVisible"
         ShowFooter="true"
         Width="900px"
         CloseOnEscapeKey="false"
         CloseOnOutsideClick="false">
    <HeaderTemplate>
        <span class="fs-5">Kolon Eşleştirmelerini Yönet</span>
    </HeaderTemplate>
    <BodyTemplate>
        <div class="mb-3">
            <p>Bu ekranda, veritabanından gelen kaynak kolonların SQL Server'daki hedef kolonlara nasıl eşleştirileceğini tanımlayabilirsiniz.</p>
            <p>Ayarlardan memnunsanız, sorguyu önizledikten sonra eşleştirmeleri daha doğru yapılandırabilirsiniz.</p>
        </div>

        <div class="mb-3">
            <div class="d-flex justify-content-between mb-2">
                <h6 class="mb-0">Mevcut Kolon Eşleştirmeleri</h6>
                <div>
                    <DxButton Text="Sorgudan Kolonları Al"
                              RenderStyle="ButtonRenderStyle.Light"
                              IconCssClass="fa fa-refresh"
                              Click="@FetchColumnsFromQuery"
                              Enabled="@(!string.IsNullOrEmpty(QueryText))"
                              CssClass="me-2" />

                    <DxButton Text="Yeni Kolon Ekle"
                              RenderStyle="ButtonRenderStyle.Primary"
                              IconCssClass="fa fa-plus"
                              Click="@AddNewColumnMapping" />
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 18%;">Kaynak Kolon</th>
                            <th style="width: 18%;">Hedef Kolon</th>
                            <th style="width: 22%;">Veri Tipi</th>
                            <th style="width: 18%;">Uzunluk</th>
                            <th style="width: 14%;">Hassasiyet</th>
                            <th style="width: 14%;">Ölçek</th>
                            <th style="width: 10%;">Anahtar</th>
                            <th style="width: 5%;">Boş?</th>
                            <th style="width: 10%;">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ColumnMappings.Count == 0)
                        {
                            <tr>
                                <td colspan="9" class="text-center">Henüz kolon eşleştirmesi yapılmamış.</td>
                            </tr>
                        }
                        @for (int i = 0; i < ColumnMappings.Count; i++)
                        {
                            var index = i;
                            <tr>
                                <td>
                                    <DxTextBox @bind-Text="@ColumnMappings[index].SourceColumnName"
                                               NullText="Kaynak kolon adı" />
                                </td>
                                <td>
                                    <DxTextBox @bind-Text="@ColumnMappings[index].TargetColumnName"
                                               NullText="Hedef kolon adı" />
                                </td>
                                <td>
                                    <DxComboBox Data="@SqlDataTypes"
                                                @bind-Value="@ColumnMappings[index].DataType"
                                                NullText="Veri tipi seçin" />
                                </td>
                                <td>
                                    <DxSpinEdit @bind-Value="@ColumnMappings[index].Length" />
                                </td>
                                <td>
                                    <DxSpinEdit @bind-Value="@ColumnMappings[index].Precision" />
                                </td>
                                <td>
                                    <DxSpinEdit @bind-Value="@ColumnMappings[index].Scale" />
                                </td>
                                <td class="text-center">
                                    <DxCheckBox @bind-Checked="@ColumnMappings[index].IsPrimaryKey" />
                                </td>
                                <td class="text-center">
                                    <DxCheckBox @bind-Checked="@ColumnMappings[index].AllowNull" />
                                </td>
                                <td>
                                    <div class="d-flex justify-content-center">
                                        <DxButton Text=""
                                                  IconCssClass="fa fa-trash"
                                                  RenderStyle="ButtonRenderStyle.Danger"
                                                  CssClass="btn-sm"
                                                  Click="@(() => RemoveColumnMapping(index))" />
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end">
            <DxButton Text="İptal"
                      RenderStyle="ButtonRenderStyle.Secondary"
                      Click="@(() => IsColumnMappingPopupVisible = false)"
                      CssClass="me-2" />
            <DxButton Text="Kaydet"
                      RenderStyle="ButtonRenderStyle.Primary"
                      Click="@SaveColumnMappings" />
        </div>
    </FooterTemplate>
</DxPopup>

<!-- Tablo İşlemi Onay Popupı -->
<DxPopup HeaderText="İşlem Onayı"
         @bind-Visible="@IsTableOperationConfirmVisible"
         ShowFooter="true"
         Width="400px">
    <HeaderTemplate>
        <span class="fs-5">İşlem Onayı</span>
    </HeaderTemplate>
    <BodyTemplate>
        <p>@TableOperationConfirmMessage</p>

        @if (CurrentTableOperation == "drop")
        {
            <div class="alert alert-danger">
                <i class="fa fa-exclamation-triangle"></i> Bu işlem geri alınamaz!
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end">
            <DxButton Text="İptal"
                      RenderStyle="ButtonRenderStyle.Secondary"
                      Click="@(() => IsTableOperationConfirmVisible = false)"
                      CssClass="me-2" />
            <DxButton Text="Onayla"
                      RenderStyle="ButtonRenderStyle.Danger"
                      Click="@ConfirmTableOperationAction" />
        </div>
    </FooterTemplate>
</DxPopup>

<DxPopup HeaderText="Sorgu Güncelleme Onayı"
         @bind-Visible="@IsUpdateConfirmVisible"
         ShowFooter="true"
         Width="500px">
    <HeaderTemplate>
        <span class="fs-5">Sorgu Güncelleme Onayı</span>
    </HeaderTemplate>
    <BodyTemplate>
        <div class="alert alert-warning">
            <i class="fa fa-exclamation-triangle me-2"></i>
            <span>
                "<b>@SaveQueryName</b>" isimli bir sorgu zaten mevcut. Bu sorguyu güncellemek istiyor musunuz?
            </span>
        </div>
        <p>Mevcut sorgudaki veriler yeni girdiğiniz verilerle değiştirilecektir.</p>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-content-end">
            <DxButton Text="İptal"
                      RenderStyle="ButtonRenderStyle.Secondary"
                      Click="@CancelUpdate"
                      CssClass="me-2" />
            <DxButton Text="Güncelle"
                      RenderStyle="ButtonRenderStyle.Primary"
                      Click="@UpdateExistingQuery" />
        </div>
    </FooterTemplate>
</DxPopup>
@code {
    private string QueryText { get; set; } = string.Empty;
    private string TargetTableName { get; set; } = string.Empty;
    private string KeyColumn { get; set; } = string.Empty;
    private string SelectedColumns { get; set; } = string.Empty;
    private int RowLimit { get; set; } = 1000;
    private bool IsProcessing { get; set; } = false;
    private string ResultMessage { get; set; } = string.Empty;
    private bool IsSuccess { get; set; } = false;
    private List<Dictionary<string, object>> PreviewData { get; set; } = new List<Dictionary<string, object>>();
    private List<dynamic> GridData { get; set; } = new List<dynamic>();
    private DxGrid PreviewGrid { get; set; }
    private string CurrentQueryName { get; set; } = string.Empty;
    private bool IsUpdateConfirmVisible { get; set; } = false;
    private SavedQuery QueryToUpdate { get; set; } = null;
    private bool IsDeleteConfirmationVisible { get; set; } = false;
    private SavedQuery QueryToDelete { get; set; }
    private string PreQuery { get; set; } = string.Empty;
    private string PostQuery { get; set; } = string.Empty;
    private string SavePreQuery { get; set; } = string.Empty;
    private string SavePostQuery { get; set; } = string.Empty;
    IGrid Grid { get; set; }
    // Veritabanı bağlantıları
    private List<DatabaseConnection> DatabaseConnections { get; set; } = new List<DatabaseConnection>();
    private int SelectedDatabaseId { get; set; }

    // Sorgu kaydetme popup
    private bool IsSaveQueryPopupVisible { get; set; } = false;
    private string SaveQueryName { get; set; } = string.Empty;
    private string SaveTableName { get; set; } = string.Empty;
    private string SaveKeyColumn { get; set; } = string.Empty;
    private string SaveQueryDescription { get; set; } = string.Empty;
    private bool IncludeColumnMappings { get; set; } = true;

    // Tablo işlemleri popup
    private bool IsTableOperationsPopupVisible { get; set; } = false;
    private bool IsTableOperationConfirmVisible { get; set; } = false;
    private string TableOperationConfirmMessage { get; set; } = string.Empty;
    private string CurrentTableOperation { get; set; } = string.Empty;

    // Kolon eşleştirme popup
    private bool IsColumnMappingPopupVisible { get; set; } = false;
    private List<QueryColumnMapping> ColumnMappings { get; set; } = new List<QueryColumnMapping>();
    private List<string> SqlDataTypes { get; set; } = new List<string> {
        "INT", "BIGINT", "SMALLINT", "TINYINT", "BIT",
        "DECIMAL", "NUMERIC", "FLOAT", "REAL", "MONEY",
        "NVARCHAR", "VARCHAR", "CHAR", "NCHAR", "TEXT", "NTEXT",
        "DATETIME", "DATE", "TIME", "DATETIME2", "DATETIMEOFFSET",
        "SMALLDATETIME",
        "UNIQUEIDENTIFIER", "VARBINARY", "IMAGE", "XML"
    };

    // Kayıtlı sorgular popup
    private bool IsSavedQueriesPopupVisible { get; set; } = false;
    private List<SavedQuery> SavedQueries { get; set; } = new List<SavedQuery>();
    private DxGrid SavedQueriesGrid { get; set; }
    private object SelectedSavedQueryObj { get; set; }

    // Helper method to get the selected query as the correct type
    private SavedQuery GetSelectedSavedQuery() => SelectedSavedQueryObj as SavedQuery;


    protected override async Task OnInitializedAsync()
    {
        await LoadDatabaseConnections();
        await LoadSavedQueries();
    }

    private async Task LoadDatabaseConnections()
    {
        try
        {
            DatabaseConnections = await QueryService.GetAllDatabaseConnectionsAsync();

            if (DatabaseConnections.Count > 0)
            {
                SelectedDatabaseId = DatabaseConnections[0].Id;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Veritabanı bağlantıları yüklenirken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
        }
    }
    private async void DatabaseSelectionChanged(int newDatabaseId)
    {
        SelectedDatabaseId = newDatabaseId;
        SavedQueries = await QueryService.GetSavedQueriesByDatabaseConnectionIdAsync(SelectedDatabaseId);
        StateHasChanged();
    }

    private async Task LoadSavedQueries()
    {
        try
        {
            SavedQueries = await QueryService.GetSavedQueriesByDatabaseConnectionIdAsync(SelectedDatabaseId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kaydedilmiş sorgular yüklenirken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
        }
    }

    private void ShowSavedQueriesPopup()
    {
        SelectedSavedQueryObj = null;
        IsSavedQueriesPopupVisible = true;
    }

    private async Task LoadSelectedQuery()
    {
        if (SelectedSavedQueryObj == null)
            return;

        var selectedQuery = GetSelectedSavedQuery();

        if (selectedQuery != null)
        {
            QueryText = selectedQuery.QueryText;
            TargetTableName = selectedQuery.TargetTableName;
            KeyColumn = selectedQuery.KeyColumn;
            SelectedDatabaseId = selectedQuery.DatabaseConnectionId;
            CurrentQueryName = selectedQuery.Name;
            PreQuery = selectedQuery.PreQuery ?? string.Empty;
            PostQuery = selectedQuery.PostQuery ?? string.Empty;

            SaveQueryName = selectedQuery.Name;

            ColumnMappings.Clear();

            await LoadColumnMappingsForQuery(selectedQuery.Id);

            ResultMessage = $"\"{selectedQuery.Name}\" sorgusu başarıyla yüklendi.";
            IsSuccess = true;
        }

        IsSavedQueriesPopupVisible = false;
    }

    private async Task LoadColumnMappingsForQuery(int queryId)
    {
        try
        {
            var mappings = await QueryService.GetColumnMappingsForQueryAsync(queryId);

            ColumnMappings.Clear();

            if (mappings != null && mappings.Any())
            {
                foreach (var mapping in mappings)
                {
                    ColumnMappings.Add(new QueryColumnMapping
                        {
                            SavedQueryId = mapping.SavedQueryId,
                            SourceColumnName = mapping.SourceColumnName,
                            TargetColumnName = mapping.TargetColumnName,
                            DataType = mapping.DataType,
                            Length = mapping.Length,
                            Precision = mapping.Precision,
                            Scale = mapping.Scale,
                            IsPrimaryKey = mapping.IsPrimaryKey,
                            AllowNull = mapping.AllowNull,
                            SortOrder = mapping.SortOrder
                        });
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sorgu için kolon eşleştirmeleri yüklenirken hata oluştu");
            ResultMessage = $"Kolon eşleştirmeleri yüklenirken hata: {ex.Message}";
            IsSuccess = false;
        }
    }

    private void ShowSaveQueryPopup()
    {
        if (string.IsNullOrWhiteSpace(QueryText))
        {
            ResultMessage = "Lütfen bir sorgu yazın.";
            IsSuccess = false;
            return;
        }

        // Form alanlarını doldur
        SaveQueryName = string.IsNullOrEmpty(SaveQueryName) ? "Yeni Sorgu" : SaveQueryName;
        SaveTableName = TargetTableName;
        SaveKeyColumn = KeyColumn;
        SaveQueryDescription = string.Empty;
        SavePreQuery = PreQuery;
        SavePostQuery = PostQuery;

        IsSaveQueryPopupVisible = true;
    }

    private void CloseSaveQueryPopup()
    {
        IsSaveQueryPopupVisible = false;
    }

    private async Task SaveQuery()
    {
        if (string.IsNullOrWhiteSpace(SaveQueryName))
        {
            ResultMessage = "Lütfen bir sorgu adı girin.";
            IsSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(SaveTableName))
        {
            ResultMessage = "Lütfen bir hedef tablo adı girin.";
            IsSuccess = false;
            return;
        }

        try
        {
            // Aynı isimde sorgu var mı kontrol et
            var existingQuery = SavedQueries.FirstOrDefault(q => q.Name.Equals(SaveQueryName, StringComparison.OrdinalIgnoreCase));
            if (existingQuery != null)
            {
                // Mevcut sorguyu kaydet ve güncelleme onay dialogunu göster
                QueryToUpdate = existingQuery;
                IsUpdateConfirmVisible = true;
                return;
            }

            // Yeni sorgu oluştur ve kaydet
            await CreateNewQuery();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sorgu kaydedilirken hata oluştu");
            ResultMessage = $"Sorgu kaydedilirken hata oluştu: {ex.Message}";
            IsSuccess = false;
        }
    }


    private void ShowColumnMappingPopup()
    {
        if (string.IsNullOrWhiteSpace(QueryText))
        {
            ResultMessage = "Lütfen önce bir sorgu yazın.";
            IsSuccess = false;
            return;
        }

        IsColumnMappingPopupVisible = true;
    }

    private void AddNewColumnMapping()
    {
        ColumnMappings.Add(new QueryColumnMapping
            {
                SourceColumnName = "",
                TargetColumnName = "",
                DataType = "NVARCHAR",
                Length = 100,
                Precision = 0,
                Scale = 0,
                IsPrimaryKey = false,
                AllowNull = true,
                SortOrder = ColumnMappings.Count + 1
            });
    }

    private void RemoveColumnMapping(int index)
    {
        if (index >= 0 && index < ColumnMappings.Count)
        {
            ColumnMappings.RemoveAt(index);

            // Sıra numaralarını güncelle
            for (int i = 0; i < ColumnMappings.Count; i++)
            {
                ColumnMappings[i].SortOrder = i + 1;
            }
        }
    }

    private async Task FetchColumnsFromQuery()
    {
        if (string.IsNullOrWhiteSpace(QueryText) || SelectedDatabaseId <= 0)
        {
            ResultMessage = "Lütfen önce bir sorgu ve veritabanı bağlantısı seçin.";
            IsSuccess = false;
            return;
        }

        IsProcessing = true;
        StateHasChanged();

        try
        {
            // Sorguyu çalıştırarak kolonları al
            var result = await QueryService.PreviewQueryAsync(SelectedDatabaseId, QueryText);

            if (result.success && result.data.Count > 0)
            {
                // Kolon listesini temizle
                ColumnMappings.Clear();

                // İlk satırdan kolon isimlerini al
                var firstRow = result.data[0];
                int sortOrder = 1;

                foreach (var key in firstRow.Keys)
                {
                    var value = firstRow[key];
                    var dataType = DetermineDataType(value);

                    ColumnMappings.Add(new QueryColumnMapping
                        {
                            SourceColumnName = key,
                            TargetColumnName = key,
                            DataType = dataType,
                            Length = dataType.Contains("VARCHAR") ? 255 : 0,
                            Precision = dataType == "DECIMAL" ? 18 : 0,
                            Scale = dataType == "DECIMAL" ? 2 : 0,
                            IsPrimaryKey = KeyColumn == key,
                            AllowNull = true,
                            SortOrder = sortOrder++
                        });
                }

                ResultMessage = $"{ColumnMappings.Count} kolon başarıyla alındı.";
                IsSuccess = true;
            }
            else
            {
                ResultMessage = "Sorgu çalıştırılamadı veya veri dönmedi. Kolon bilgileri alınamadı.";
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Kolonlar sorgudan alınırken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private string DetermineDataType(object value)
    {
        if (value == null)
            return "NVARCHAR";

        if (value is int || value is Int32 || value is Int16 || value is byte)
            return "INT";
        else if (value is long || value is Int64)
            return "BIGINT";
        else if (value is decimal || value is double || value is float)
            return "DECIMAL";
        else if (value is bool)
            return "BIT";
        else if (value is DateTime)
            return "DATETIME";
        else if (value is Guid)
            return "UNIQUEIDENTIFIER";
        else if (value is byte[])
            return "VARBINARY";
        else
            return "NVARCHAR";
    }

    private void SaveColumnMappings()
    {
        // Anahtar kolonu güncelle (varsa)
        var primaryKeyMapping = ColumnMappings.FirstOrDefault(m => m.IsPrimaryKey);
        if (primaryKeyMapping != null)
        {
            KeyColumn = primaryKeyMapping.SourceColumnName;
        }

        // Popup'ı kapat
        IsColumnMappingPopupVisible = false;

        ResultMessage = "Kolon eşleştirmeleri başarıyla kaydedildi.";
        IsSuccess = true;
    }

    private void ConfirmTableOperation(string operation)
    {
        CurrentTableOperation = operation;

        if (operation == "truncate")
        {
            TableOperationConfirmMessage = $"\"{TargetTableName}\" tablosundaki tüm verileri silmek istediğinize emin misiniz?";
        }
        else if (operation == "drop")
        {
            TableOperationConfirmMessage = $"\"{TargetTableName}\" tablosunu tamamen silmek istediğinize emin misiniz?";
        }

        IsTableOperationConfirmVisible = true;
    }

    private async Task ConfirmTableOperationAction()
    {
        try
        {
            if (CurrentTableOperation == "truncate")
            {
                await QueryService.TruncateTableAsync(TargetTableName);
                ResultMessage = $"\"{TargetTableName}\" tablosu başarıyla temizlendi (TRUNCATE).";
                IsSuccess = true;
            }
            else if (CurrentTableOperation == "drop")
            {
                await QueryService.DropTableAsync(TargetTableName);
                ResultMessage = $"\"{TargetTableName}\" tablosu başarıyla silindi (DROP).";
                IsSuccess = true;

                GridData = new List<dynamic>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Tablo işlemi sırasında hata oluştu: {ex.Message}");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsTableOperationConfirmVisible = false;
        }
    }

    private async Task ViewTable()
    {
        if (string.IsNullOrWhiteSpace(TargetTableName))
        {
            ResultMessage = "Lütfen bir tablo adı girin.";
            IsSuccess = false;
            return;
        }

        try
        {
            IsProcessing = true;
            ResultMessage = string.Empty;

            string columnsToSelect = "*";
            if (!string.IsNullOrWhiteSpace(SelectedColumns))
            {
                columnsToSelect = SelectedColumns.Trim();
            }

            var data = await QueryService.QuerySqlTableAsync(
                TargetTableName,
                RowLimit,
                columnsToSelect,
                null); 

            if (data.Count > 0)
            {
                var gridData = new List<dynamic>();

                foreach (var row in data)
                {
                    dynamic expandoObj = new System.Dynamic.ExpandoObject();
                    var expandoDict = (IDictionary<string, object>)expandoObj;

                    foreach (var kvp in row)
                    {
                        expandoDict[kvp.Key] = kvp.Value;
                    }

                    gridData.Add(expandoObj);
                }

                GridData = gridData;
                ResultMessage = $"\"{TargetTableName}\" tablosundan {data.Count} kayıt görüntüleniyor.";
                IsSuccess = true;

                // Kolon eşleştirmelerini güncelle
                await LoadTableColumnsForMapping(TargetTableName);
            }
            else
            {
                ResultMessage = $"\"{TargetTableName}\" tablosunda kayıt bulunamadı.";
                IsSuccess = true;
                GridData = new List<dynamic>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Tablo görüntülenirken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
            GridData = new List<dynamic>();
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task LoadTableColumnsForMapping(string tableName)
    {
        try
        {
            var columns = await QueryService.GetTableColumnsAsync(tableName);

            if (columns.Count > 0)
            {
                // Kolon eşleştirme listesini temizle
                ColumnMappings.Clear();

                int sortOrder = 1;
                foreach (var column in columns)
                {
                    string columnName = column["Name"].ToString();
                    string dataType = column["DataType"].ToString();
                    bool isPrimaryKey = Convert.ToBoolean(column["IsPrimaryKey"]);
                    bool isNullable = Convert.ToBoolean(column["IsNullable"]);

                    // Uzunluk değerini al
                    int length = 0;
                    if (column["MaxLength"] != null && column["MaxLength"] != DBNull.Value)
                    {
                        int.TryParse(column["MaxLength"].ToString(), out length);
                    }

                    // Hassasiyet değerini al
                    int precision = 0;
                    if (column["Precision"] != null && column["Precision"] != DBNull.Value)
                    {
                        int.TryParse(column["Precision"].ToString(), out precision);
                    }
                    int scale = 0;
                    if (column["Scale"] != null && column["Scale"] != DBNull.Value)
                    {
                        int.TryParse(column["Scale"].ToString(), out scale);
                    }
                    ColumnMappings.Add(new QueryColumnMapping
                        {
                            SourceColumnName = columnName,
                            TargetColumnName = columnName,
                            DataType = dataType.ToUpper(),
                            Length = length,
                            Precision = precision,
                            Scale = scale,
                            IsPrimaryKey = isPrimaryKey,
                            AllowNull = isNullable,
                            SortOrder = sortOrder++
                        });
                }

                // Anahtar kolonu güncelle
                var primaryKey = ColumnMappings.FirstOrDefault(c => c.IsPrimaryKey);
                if (primaryKey != null && string.IsNullOrEmpty(KeyColumn))
                {
                    KeyColumn = primaryKey.SourceColumnName;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Tablo kolonları alınırken hata oluştu");
        }
    }

    private async Task ExecuteQuery()
    {
        if (SelectedDatabaseId <= 0)
        {
            ResultMessage = "Lütfen bir veritabanı bağlantısı seçin.";
            IsSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(QueryText))
        {
            ResultMessage = "Lütfen bir sorgu girin.";
            IsSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(TargetTableName))
        {
            ResultMessage = "Lütfen bir hedef tablo adı girin.";
            IsSuccess = false;
            return;
        }

        IsProcessing = true;
        ResultMessage = string.Empty;
        GridData = new List<dynamic>();
        StateHasChanged();

        try
        {
            Logger.LogInformation("Sorgu çalıştırılıyor...");

            // Sorguyu çalıştırmadan önce mevcut ColumnMappings listesini kopyalayalım
            var columnMappingsToSend = new List<QueryColumnMapping>();

            if (ColumnMappings.Count > 0)
            {
                // Kolon eşleştirmelerini kopyalayarak yeni bir liste oluştur
                foreach (var mapping in ColumnMappings)
                {
                    columnMappingsToSend.Add(new QueryColumnMapping
                        {
                            SourceColumnName = mapping.SourceColumnName,
                            TargetColumnName = mapping.TargetColumnName,
                            DataType = mapping.DataType,
                            Length = mapping.Length,
                            Precision = mapping.Precision,
                            Scale = mapping.Scale,
                            IsPrimaryKey = mapping.IsPrimaryKey,
                            AllowNull = mapping.AllowNull,
                            SortOrder = mapping.SortOrder
                        });
                }
            }

            // Kolon eşleştirmelerini de parametre olarak gönder
            var result = await QueryService.ExecuteQueryAndSaveToSqlAsync(
                SelectedDatabaseId,
                QueryText,
                TargetTableName,
                KeyColumn,
                null,
                columnMappingsToSend,
            PreQuery,
            PostQuery);

            ResultMessage = result.message;
            IsSuccess = result.success;

            if (result.success && result.recordCount > 0)
            {
                await ViewTable();

                if (ColumnMappings.Count == 0)
                {
                    await LoadTableColumnsForMapping(TargetTableName);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sorgu çalıştırılırken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task PreviewQuery()
    {
        if (SelectedDatabaseId <= 0)
        {
            ResultMessage = "Lütfen bir veritabanı bağlantısı seçin.";
            IsSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(QueryText))
        {
            ResultMessage = "Lütfen bir sorgu girin.";
            IsSuccess = false;
            return;
        }

        IsProcessing = true;
        ResultMessage = string.Empty;
        GridData = new List<dynamic>();
        StateHasChanged();

        try
        {
            var result = await QueryService.PreviewQueryAsync(SelectedDatabaseId, QueryText);

            if (result.success && result.data.Count > 0)
            {
                var gridData = new List<dynamic>();

                foreach (var row in result.data)
                {
                    dynamic expandoObj = new System.Dynamic.ExpandoObject();
                    var expandoDict = (IDictionary<string, object>)expandoObj;

                    foreach (var kvp in row)
                    {
                        expandoDict[kvp.Key] = kvp.Value;
                    }

                    gridData.Add(expandoObj);
                }

                GridData = gridData;
                ResultMessage = result.message;
                IsSuccess = true;

                if (ColumnMappings.Count == 0 && result.data.Count > 0)
                {
                    var firstRow = result.data[0];
                    int sortOrder = 1;

                    foreach (var key in firstRow.Keys)
                    {
                        var value = firstRow[key];
                        var dataType = DetermineDataType(value);

                        ColumnMappings.Add(new QueryColumnMapping
                            {
                                SourceColumnName = key,
                                TargetColumnName = key,
                                DataType = dataType,
                                Length = dataType.Contains("VARCHAR") ? 255 : 0,
                                Precision = dataType == "DECIMAL" ? 2 : 0,
                                IsPrimaryKey = KeyColumn == key,
                                AllowNull = true,
                                SortOrder = sortOrder++
                            });
                    }
                }
            }
            else
            {
                ResultMessage = result.message;
                IsSuccess = result.success;
                GridData = new List<dynamic>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sorgu önizleme için çalıştırılırken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ExportToExcel()
    {
        if (PreviewGrid == null || GridData == null || GridData.Count == 0)
        {
            ResultMessage = "Dışa aktarılacak veri bulunamadı.";
            IsSuccess = false;
            return;
        }

        try
        {
            await PreviewGrid.ExportToXlsxAsync($"SqlQuery_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx");
            ResultMessage = "Veriler Excel'e başarıyla aktarıldı.";
            IsSuccess = true;
        }
        catch (Exception ex)
        {
            ResultMessage = $"Excel'e aktarma hatası: {ex.Message}";
            IsSuccess = false;
        }
    }
    private async Task CreateNewQuery()
    {
        var query = new SavedQuery
            {
                Name = SaveQueryName,
                QueryText = QueryText,
                TargetTableName = SaveTableName,
                KeyColumn = SaveKeyColumn,
                Description = SaveQueryDescription,
                DatabaseConnectionId = SelectedDatabaseId,
                CreatedAt = DateTime.Now,
                PreQuery = SavePreQuery,
                PostQuery = SavePostQuery
            };

        if (IncludeColumnMappings && ColumnMappings.Count > 0)
        {
            query.ColumnMappings = new List<QueryColumnMapping>();

            foreach (var mapping in ColumnMappings)
            {
                query.ColumnMappings.Add(new QueryColumnMapping
                    {
                        SourceColumnName = mapping.SourceColumnName,
                        TargetColumnName = mapping.TargetColumnName,
                        DataType = mapping.DataType,
                        Length = mapping.Length,
                        Precision = mapping.Precision,
                        Scale = mapping.Scale,
                        IsPrimaryKey = mapping.IsPrimaryKey,
                        AllowNull = mapping.AllowNull,
                        SortOrder = mapping.SortOrder
                    });
            }
        }

        await QueryService.AddSavedQueryAsync(query);
        await LoadSavedQueries();
        CurrentQueryName = SaveQueryName;
        TargetTableName = SaveTableName;

        CloseSaveQueryPopup();

        ResultMessage = $"\"{SaveQueryName}\" sorgusu başarıyla kaydedildi.";
        IsSuccess = true;
    }

    private async Task UpdateExistingQuery()
    {
        if (QueryToUpdate == null)
            return;

        QueryToUpdate.QueryText = QueryText;
        QueryToUpdate.TargetTableName = SaveTableName;
        QueryToUpdate.KeyColumn = SaveKeyColumn;
        QueryToUpdate.Description = SaveQueryDescription;
        QueryToUpdate.DatabaseConnectionId = SelectedDatabaseId;
        QueryToUpdate.PreQuery = SavePreQuery;
        QueryToUpdate.PostQuery = SavePostQuery;
        // Kolon eşleştirmelerini güncelle
        if (IncludeColumnMappings && ColumnMappings.Count > 0)
        {
            // Mevcut eşleştirmeleri temizleme işlemi server tarafında yapılacak
            QueryToUpdate.ColumnMappings = new List<QueryColumnMapping>();

            foreach (var mapping in ColumnMappings)
            {
                QueryToUpdate.ColumnMappings.Add(new QueryColumnMapping
                    {
                        SourceColumnName = mapping.SourceColumnName,
                        TargetColumnName = mapping.TargetColumnName,
                        DataType = mapping.DataType,
                        Length = mapping.Length,
                        Precision = mapping.Precision,
                        Scale = mapping.Scale,
                        IsPrimaryKey = mapping.IsPrimaryKey,
                        AllowNull = mapping.AllowNull,
                        SortOrder = mapping.SortOrder
                    });
            }
        }

        await QueryService.UpdateSavedQueryAsync(QueryToUpdate);

        await LoadSavedQueries();

        CurrentQueryName = SaveQueryName;

        TargetTableName = SaveTableName;

        IsUpdateConfirmVisible = false;
        QueryToUpdate = null;
        CloseSaveQueryPopup();

        ResultMessage = $"\"{SaveQueryName}\" sorgusu başarıyla güncellendi.";
        IsSuccess = true;
    }

    private void CancelUpdate()
    {
        IsUpdateConfirmVisible = false;
        QueryToUpdate = null;
    }
    private void ConfirmDeleteQuery(SavedQuery query)
    {
        QueryToDelete = query;
        IsDeleteConfirmationVisible = true;
    }
    private async Task DeleteSelectedQuery()
    {
        if (QueryToDelete == null)
            return;

        try
        {
            bool result = await QueryService.DeleteSavedQueryAsync(QueryToDelete.Id);

            if (result)
            {
                ResultMessage = $"\"{QueryToDelete.Name}\" sorgusu başarıyla silindi.";
                IsSuccess = true;

                if (CurrentQueryName == QueryToDelete.Name)
                {
                    CurrentQueryName = string.Empty;
                    QueryText = string.Empty;
                    TargetTableName = string.Empty;
                    KeyColumn = string.Empty;
                    ColumnMappings.Clear();
                }
            }
            else
            {
                ResultMessage = "Sorgu silinemedi.";
                IsSuccess = false;
            }

            await LoadSavedQueries();
            IsDeleteConfirmationVisible = false;
            QueryToDelete = null;
            SelectedSavedQueryObj = null;
            IsSavedQueriesPopupVisible = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sorgu silinirken hata oluştu");
            ResultMessage = $"Hata: {ex.Message}";
            IsSuccess = false;
            IsDeleteConfirmationVisible = false;
        }
    }
    bool EditItemsEnabled { get; set; }
    void UpdateEditItemsEnabled(bool enabled)
    {
        EditItemsEnabled = enabled;
    }
    int FocusedRowVisibleIndex { get; set; }
    void DeleteItem_Click()
    {
        var selectedQuery = GetSelectedSavedQuery();
        if (selectedQuery != null)
        {
            ConfirmDeleteQuery(selectedQuery);
        }
    }
    void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
        UpdateEditItemsEnabled(true);
    }
    private void ConfirmDeleteCurrentQuery()
    {
        if (string.IsNullOrEmpty(CurrentQueryName))
            return;

        var currentQuery = SavedQueries.FirstOrDefault(q => q.Name.Equals(CurrentQueryName, StringComparison.OrdinalIgnoreCase));

        if (currentQuery != null)
        {
            QueryToDelete = currentQuery;
            IsDeleteConfirmationVisible = true;
        }
    }
}